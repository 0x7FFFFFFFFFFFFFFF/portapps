<?xml version="1.0" encoding="UTF-8"?>
<project name="papps-common" basedir=".">

  <tstamp><format property="current.date" pattern="yyyyMMdd"/></tstamp>
  <tstamp><format property="build.date" pattern="yyyy/MM/dd HH:mm:ss"/></tstamp>

  <!-- Check required properties -->
  <fail unless="app.basedir" message="Property 'app.basedir' must be defined before loading build-common.xml"/>
  <fail unless="core.basedir" message="Property 'core.basedir' must be defined before loading build-common.xml"/>

  <!-- Load properties -->
  <dirname property="build.basedir" file="${ant.file.papps-common}"/>
  <property name="root.basedir" location="${build.basedir}/.."/>
  <property file="${build.basedir}\build-common.properties"/>
  <property environment="env"/>

  <!-- Build number -->
  <condition property="app.release" value="${env.APPVEYOR_BUILD_NUMBER}"><isset property="env.APPVEYOR_BUILD_NUMBER"/></condition>
  <condition property="app.release" value="0"><not><isset property="env.APPVEYOR_BUILD_NUMBER"/></not></condition>

  <!-- Set defaults -->
  <condition property="core.basedir" value="${root.basedir}"><not><isset property="core.basedir"/></not></condition>

  <!-- Core properties -->
  <property name="core.lib.path" value="${core.basedir}\${bin.dir}\lib"/>
  <property name="core.res.path" value="${core.basedir}\${res.dir}"/>
  <property name="7za" value="${core.lib.path}\7zipextra\7za.exe"/>
  <property name="7z" value="${core.lib.path}\7zip\7z.exe"/>
  <property name="rcedit.x86" value="${core.lib.path}\rcedit\rcedit-x86.exe"/>
  <property name="rcedit.x64" value="${core.lib.path}\rcedit\rcedit-x64.exe"/>
  <property name="innoextract" location="${core.lib.path}\innoextract\innoextract.exe"/>
  <property name="innosetup.path" location="${core.lib.path}\innosetup"/>
  <property name="iscc" location="${innosetup.path}\app\ISCC.exe"/>
  <property name="upx32" location="${core.lib.path}\upx\upx32.exe"/>
  <property name="upx64" location="${core.lib.path}\upx\upx64.exe"/>

  <!-- Base Properties -->
  <property name="res.path" value="${app.basedir}\${res.dir}"/>
  <property name="bin.path" value="${app.basedir}\${bin.dir}"/>
  <property name="build.path" value="${bin.path}\build"/>
  <property name="setup.path" location="${bin.path}\setup"/>
  <property name="release.path" value="${bin.path}\release"/>
  <property name="tmp.path" value="${bin.path}\tmp"/>

  <!-- Functions -->
  <scriptdef name="randomstring" language="javascript">
    <attribute name="property"/>
    <![CDATA[
    var SecureRandom = java.security.SecureRandom;
    var BigInteger = java.math.BigInteger;
    project.setProperty(attributes.get("property"), new BigInteger(130, new SecureRandom()).toString(32));
    ]]>
  </scriptdef>

  <macrodef name="sevenzip">
    <attribute name="src"/>
    <attribute name="dest"/>
    <attribute name="format" default="7z"/>
    <sequential>
      <if>
        <equals arg1="@{format}" arg2="7z"/>
        <then>
          <echo message="Compressing @{src} to @{dest}..."/>
          <exec executable="${7za}" failonerror="true">
            <arg value="a"/>
            <arg value="-t7z"/>
            <arg value="@{dest}"/>
            <arg value="@{src}"/>
            <arg value="-m0=LZMA2"/>
            <arg value="-mx9"/>
            <arg value="-mmt2"/>
          </exec>
        </then>
        <elseif>
          <equals arg1="@{format}" arg2="zip"/>
          <then>
            <echo message="Compressing @{src} to @{dest}..."/>
            <exec executable="${7za}" failonerror="true">
              <arg value="a"/>
              <arg value="-mm=Deflate"/>
              <arg value="-mfb=258"/>
              <arg value="-mpass=15"/>
              <arg value="-r"/>
              <arg value="@{dest}"/>
              <arg value="@{src}"/>
            </exec>
          </then>
        </elseif>
        <else>
          <fail message="Unknown format: @{format}"/>
        </else>
      </if>
    </sequential>
  </macrodef>

  <macrodef name="sevenzip-ax">
    <attribute name="src"/>
    <attribute name="dest"/>
    <attribute name="overwrite" default="-aoa"/>
    <sequential>
      <echo message="Extracting @{src} to @{dest}..."/>
      <exec executable="${7za}" failonerror="true">
        <arg value="x"/>
        <arg value="@{overwrite}"/>
        <arg value="@{src}"/>
        <arg value="-o@{dest}"/>
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="sevenzip-x">
    <attribute name="src"/>
    <attribute name="dest"/>
    <attribute name="overwrite" default="-aoa"/>
    <sequential>
      <echo message="Extracting @{src} to @{dest}..."/>
      <exec executable="${7z}" failonerror="true">
        <arg value="x"/>
        <arg value="@{overwrite}"/>
        <arg value="@{src}"/>
        <arg value="-o@{dest}"/>
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="upx">
    <attribute name="arch"/>
    <attribute name="dir"/>
    <element name="args"/>
    <sequential>
      <if>
        <equals arg1="@{arch}" arg2="win32"/>
        <then>
          <exec executable="${upx32}" failonerror="true" dir="@{dir}">
            <args/>
          </exec>
        </then>
        <elseif>
          <equals arg1="@{arch}" arg2="win64"/>
          <then>
            <exec executable="${upx64}" failonerror="true" dir="@{dir}">
              <args/>
            </exec>
          </then>
        </elseif>
        <else>
          <fail message="Unknown arch for UPX compression: @{arch}"/>
        </else>
      </if>
    </sequential>
  </macrodef>

  <macrodef name="assertdir">
    <attribute name="dir"/>
    <sequential>
      <fail message="Directory '@{dir}' does not exist">
        <condition><not><available file="@{dir}" type="dir"/></not></condition>
      </fail>
    </sequential>
  </macrodef>

  <macrodef name="assertfile">
    <attribute name="file"/>
    <sequential>
      <fail message="File '@{file}' does not exist">
        <condition><not><available file="@{file}" type="file"/></not></condition>
      </fail>
    </sequential>
  </macrodef>

  <macrodef name="assertprop">
    <attribute name="property"/>
    <sequential>
      <fail message="Property '@{property}' not defined">
        <condition><not><isset property="@{property}"/></not></condition>
      </fail>
    </sequential>
  </macrodef>

  <macrodef name="setelectronuserdata">
    <attribute name="path"/>
    <attribute name="search"/>
    <attribute name="replace"/>
    <sequential>
      <antcall target="load.lib.asar"/>

      <echo message="Extracting electron.asar..."/>
      <exec executable="asar.cmd" failonerror="true" dir="@{path}\resources">
        <arg value="extract"/>
        <arg value="electron.asar"/>
        <arg value="electron.unpacked"/>
      </exec>

      <echo message="Replacing userData in electron.asar..."/>
      <assertfile file="@{path}\resources\electron.unpacked\browser\init.js"/>
      <replace file="@{path}\resources\electron.unpacked\browser\init.js">
        <replacefilter token="@{search}" value="@{replace}"/>
      </replace>

      <echo message="Packaging electron.asar..."/>
      <exec executable="asar.cmd" failonerror="true" dir="@{path}\resources">
        <arg value="pack"/>
        <arg value="electron.unpacked"/>
        <arg value="electron.asar"/>
      </exec>
      <delete dir="@{path}\resources\electron.unpacked"/>
    </sequential>
  </macrodef>

  <macrodef name="rcedit">
    <attribute name="arch"/>
    <attribute name="dir"/>
    <element name="args"/>
    <sequential>
      <echo message="Extracting @{src} to @{dest}..."/>
      <if>
        <equals arg1="@{arch}" arg2="win32"/>
        <then>
          <exec executable="${rcedit.x86}" failonerror="true" dir="@{dir}">
            <args/>
          </exec>
        </then>
        <else>
          <exec executable="${rcedit.x64}" failonerror="true" dir="@{dir}">
            <args/>
          </exec>
        </else>
      </if>
    </sequential>
  </macrodef>

  <!-- Targets -->
  <target name="start">
    <echo message="*** Start building ${app}"/>
    <echo message="* ID       : ${papp.id} "/>
    <echo message="* Name     : ${papp.name} "/>
    <echo message="* Desc     : ${papp.desc} "/>
    <echo message="* Atf arch : ${atf.arch} "/>
    <echo message="* Atf url  : ${atf.url} "/>
    <echo message="* GOARCH   : ${go.arch} "/>
  </target>

  <target name="init" depends="load.libs">
    <mkdir dir="${bin.path}"/>
    <mkdir dir="${core.lib.path}"/>
    <delete dir="${build.path}"/>
    <mkdir dir="${build.path}"/>
    <delete dir="${setup.path}"/>
    <mkdir dir="${setup.path}"/>
  </target>

  <target name="load.libs" unless="is.lib.loaded" depends="
      load.lib.antcontrib,
      load.lib.7za,
      load.lib.7z,
      load.lib.rcedit,
      load.lib.innosetup,
      load.lib.upx">
    <var name="is.lib.loaded" value="true"/>
  </target>

  <target name="load.lib.antcontrib" unless="is.lib.loaded">
    <echo message="Load ANT Contrib"/>
    <mkdir dir="${core.lib.path}\ant-contrib"/>
    <get dest="${core.lib.path}\ant-contrib\ant-contrib.jar" src="${antcontrib.url}" skipexisting="true"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <fileset dir="${core.lib.path}/ant-contrib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </taskdef>
  </target>

  <target name="load.lib.7za" unless="is.lib.loaded">
    <echo message="Load 7za"/>
    <get dest="${core.lib.path}\7zipextra.zip" src="${7zipextra.url}" skipexisting="true"/>
    <if>
      <not><available file="${core.lib.path}\7zipextra" type="dir"/></not>
      <then>
        <unzip src="${core.lib.path}\7zipextra.zip" dest="${core.lib.path}\7zipextra"/>
      </then>
    </if>
  </target>

  <target name="load.lib.7z" unless="is.lib.loaded">
    <echo message="Load 7za"/>
    <get dest="${core.lib.path}\7z.exe" src="${7zip.url}" skipexisting="true"/>
    <if>
      <not><available file="${core.lib.path}\7zip" type="dir"/></not>
      <then>
        <sevenzip-ax src="${core.lib.path}\7z.exe" dest="${core.lib.path}\7zip"/>
      </then>
    </if>
  </target>

  <target name="load.lib.rcedit" unless="is.lib.loaded">
    <echo message="Load Rcedit"/>
    <mkdir dir="${core.lib.path}\rcedit"/>
    <get dest="${core.lib.path}\rcedit\rcedit-x86.exe" src="${rcedit.x86.url}" skipexisting="true"/>
    <get dest="${core.lib.path}\rcedit\rcedit-x64.exe" src="${rcedit.x64.url}" skipexisting="true"/>
  </target>

  <target name="load.lib.innoextract" unless="is.lib.loaded">
    <echo message="Load innoextract"/>
    <get dest="${core.lib.path}\innoextract.zip" src="${innoextract.url}" skipexisting="true"/>
    <if>
      <not><available file="${core.lib.path}\innoextract" type="dir"/></not>
      <then>
        <unzip src="${core.lib.path}\innoextract.zip" dest="${core.lib.path}\innoextract"/>
      </then>
    </if>
  </target>

  <target name="load.lib.innosetup" depends="load.lib.innoextract" unless="is.lib.loaded">
    <echo message="Load InnoSetup"/>
    <get dest="${core.lib.path}\innosetup.exe" src="${innosetup.url}" skipexisting="true"/>
    <if>
      <not><available file="${innosetup.path}\app" type="dir"/></not>
      <then>
        <exec executable="${innoextract}">
          <arg value="-d"/>
          <arg value="${innosetup.path}"/>
          <arg value="${core.lib.path}\innosetup.exe"/>
        </exec>
      </then>
    </if>
    <assertfile file="${iscc}"/>
  </target>

  <target name="load.lib.upx" unless="is.lib.loaded">
    <echo message="Load upx"/>
    <get dest="${core.lib.path}\upx32.zip" src="${upx.win32.url}" skipexisting="true"/>
    <get dest="${core.lib.path}\upx64.zip" src="${upx.win64.url}" skipexisting="true"/>
    <if>
      <not><available file="${core.lib.path}\upx" type="dir"/></not>
      <then>
        <unzip src="${core.lib.path}\upx32.zip" dest="${core.lib.path}\upx">
          <patternset>
            <include name="**/upx.exe"/>
          </patternset>
          <mapper type="flatten"/>
        </unzip>
        <move file="${core.lib.path}\upx\upx.exe" tofile="${core.lib.path}\upx\upx32.exe"/>
        <unzip src="${core.lib.path}\upx64.zip" dest="${core.lib.path}\upx">
          <patternset>
            <include name="**/upx.exe"/>
          </patternset>
          <mapper type="flatten"/>
        </unzip>
        <move file="${core.lib.path}\upx\upx.exe" tofile="${core.lib.path}\upx\upx64.exe"/>
      </then>
    </if>
  </target>

  <target name="load.lib.asar">
    <echo message="Load Asar"/>
    <exec executable="npm.cmd" failonerror="true">
      <arg value="config"/>
      <arg value="set"/>
      <arg value="strict-ssl"/>
      <arg value="false"/>
      <arg value="-g"/>
    </exec>
    <exec executable="npm.cmd" failonerror="true">
      <arg value="install"/>
      <arg value="-g"/>
      <arg value="asar@${asar.version}"/>
    </exec>
  </target>

  <target name="clear">
    <if>
      <not><available file="${tmp.path}\${app.buildid}" type="file"/></not>
      <then><delete dir="${release.path}"/></then>
    </if>
    <mkdir dir="${release.path}"/>
  </target>

  <target name="filterset">
    <filterset id="filterset.app">
      <filter token="APP_ID" value="${papp.id}"/>
      <filter token="APP_NAME" value="${papp.name}"/>
      <filter token="APP_DESC" value="${papp.desc}"/>
      <filter token="APP_VERSION" value="${app.version}"/>
      <filter token="APP_RELEASE" value="${app.release}"/>
      <filter token="APP_COPYRIGHT" value="${papp.url}"/>
    </filterset>
    <echo message="APP_ID        : ${papp.id}"/>
    <echo message="APP_NAME      : ${papp.name}"/>
    <echo message="APP_DESC      : ${papp.desc}"/>
    <echo message="APP_VERSION   : ${app.version}"/>
    <echo message="APP_RELEASE   : ${app.release}"/>
    <echo message="APP_COPYRIGHT : ${papp.url}"/>
  </target>

  <target name="downmod" description="Download modules">
    <exec executable="go" failonerror="true" dir="${app.basedir}">
      <arg value="mod"/>
      <arg value="download"/>
    </exec>
  </target>

  <target name="generate">
    <copy file="${core.res.path}/versioninfo.json" todir="${app.basedir}" overwrite="true">
      <filterset refid="filterset.app"/>
    </copy>
    <exec executable="go" failonerror="true" dir="${app.basedir}">
      <env key="GOARCH" value="${go.arch}"/>
      <arg value="generate"/>
      <arg value="-v"/>
    </exec>
  </target>

  <target name="build" depends="downmod, generate">
    <!-- GO build -->
    <delete>
      <fileset dir="${tmp.path}" includes="*_upx.exe"/>
    </delete>
    <if>
      <equals arg1="${atf.arch}" arg2="win3264"/>
      <then>
        <delete file="${tmp.path}\${papp.id}-win32.exe"/>
        <exec executable="go" failonerror="true" dir="${app.basedir}">
          <env key="GOARCH" value="386"/>
          <env key="CGO_ENABLED" value="${go.cgo}"/>
          <arg value="build"/>
          <arg value="-o"/>
          <arg value="${tmp.path}\${papp.id}-win32.exe"/>
          <arg value="-v"/>
          <arg value="-x"/>
          <arg value="-ldflags"/>
          <arg value="${go.ldflags}"/>
        </exec>
        <assertfile file="${tmp.path}\${papp.id}-win32.exe"/>
        <delete file="${tmp.path}\${papp.id}-win64.exe"/>
        <exec executable="go" failonerror="true" dir="${app.basedir}">
          <env key="GOARCH" value="amd64"/>
          <env key="CGO_ENABLED" value="${go.cgo}"/>
          <arg value="build"/>
          <arg value="-o"/>
          <arg value="${tmp.path}\${papp.id}-win64.exe"/>
          <arg value="-v"/>
          <arg value="-x"/>
          <arg value="-ldflags"/>
          <arg value="${go.ldflags}"/>
        </exec>
        <assertfile file="${tmp.path}\${papp.id}-win64.exe"/>
        <if>
          <equals arg1="${debug}" arg2="false"/>
          <then>
            <echo message="Compressing executables with UPX..."/>
            <upx arch="win32" dir="${app.basedir}">
              <args>
                <arg value="--brute"/>
                <arg value="${tmp.path}\${papp.id}-win32.exe"/>
                <arg value="-o"/>
                <arg value="${tmp.path}\${papp.id}-win32_upx.exe"/>
              </args>
            </upx>
            <assertfile file="${tmp.path}\${papp.id}-win32_upx.exe"/>
            <move file="${tmp.path}\${papp.id}-win32_upx.exe" tofile="${tmp.path}\${papp.id}-win32.exe"/>
            <upx arch="win64" dir="${app.basedir}">
              <args>
                <arg value="--brute"/>
                <arg value="${tmp.path}\${papp.id}-win64.exe"/>
                <arg value="-o"/>
                <arg value="${tmp.path}\${papp.id}-win64_upx.exe"/>
              </args>
            </upx>
            <assertfile file="${tmp.path}\${papp.id}-win64_upx.exe"/>
            <move file="${tmp.path}\${papp.id}-win64_upx.exe" tofile="${tmp.path}\${papp.id}-win64.exe"/>
          </then>
        </if>
      </then>
      <else>
        <delete file="${tmp.path}\${papp.id}.exe"/>
        <exec executable="go" failonerror="true" dir="${app.basedir}">
          <env key="GOARCH" value="${go.arch}"/>
          <env key="CGO_ENABLED" value="${go.cgo}"/>
          <arg value="build"/>
          <arg value="-o"/>
          <arg value="${tmp.path}\${papp.id}.exe"/>
          <arg value="-v"/>
          <arg value="-x"/>
          <arg value="-ldflags"/>
          <arg value="${go.ldflags}"/>
        </exec>
        <assertfile file="${tmp.path}\${papp.id}.exe"/>
        <if>
          <equals arg1="${debug}" arg2="false"/>
          <then>
            <echo message="Compressing executable with UPX..."/>
            <upx arch="${atf.arch}" dir="${app.basedir}">
              <args>
                <arg value="--brute"/>
                <arg value="${tmp.path}\${papp.id}.exe"/>
                <arg value="-o"/>
                <arg value="${tmp.path}\${papp.id}_upx.exe"/>
              </args>
            </upx>
            <assertfile file="${tmp.path}\${papp.id}_upx.exe"/>
            <move file="${tmp.path}\${papp.id}_upx.exe" tofile="${tmp.path}\${papp.id}.exe"/>
          </then>
        </if>
      </else>
    </if>

    <!-- Portapp JSON -->
    <copy file="${core.res.path}\portapp.json" todir="${build.path}" overwrite="true">
      <filterset>
        <filter token="APP_ID" value="${papp.id}"/>
        <filter token="APP_GUID" value="${papp.guid}"/>
        <filter token="APP_NAME" value="${papp.name}"/>
        <filter token="APP_VERSION" value="${app.version}"/>
        <filter token="APP_RELEASE" value="${app.release}"/>
        <filter token="APP_DATE" value="${build.date}"/>
        <filter token="APP_URL" value="${papp.url}"/>
        <filter token="APP_PUBLISHER" value="${publisher}"/>
      </filterset>
    </copy>
  </target>

</project>
